/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.pipeline.DataPipeline;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.Disposable;
import reactor.core.scheduler.Schedulers;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class App {
    private static final Logger log = LoggerFactory.getLogger(App.class);
    private static final int PRODUCER_AMOUNT = 100;

    public static void main(String[] args) throws InterruptedException {
        DataPipeline pipeline = new DataPipeline();
        CountDownLatch latch = new CountDownLatch(1);
        Disposable subscription = pipeline.startPipeline(PRODUCER_AMOUNT)
                .subscribeOn(Schedulers.boundedElastic())
                .subscribe(enrichedSensorData -> log.info("Output: " + enrichedSensorData),
                        error -> {
                            log.error("Pipeline execution error: " + error.getMessage());
                            latch.countDown();
                        },
                        () -> {
                            log.info("Pipeline Finished successfully");
                            latch.countDown();
                        });

        latch.await(10 , TimeUnit.SECONDS);
        subscription.dispose();
    }
}
